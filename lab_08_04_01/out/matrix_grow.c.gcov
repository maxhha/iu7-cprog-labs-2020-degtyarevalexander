        -:    0:Source:src/matrix_grow.c
        -:    1:#include "../inc/matrix_grow.h"
        -:    2:
        6:    3:matrix_t *grow_matrix_rows(const matrix_t *m, size_t height)
        -:    4:{
        -:    5:    LOG_DEBUG("m = %p, height = %lu", (void *) m, height);
        -:    6:    LOG_DEBUG("m->height = %lu", m->height);
        -:    7:
        6:    8:    if (m->height >= height)
        -:    9:    {
        -:   10:        LOG_ERROR("matrix height is not less than target height%s", "");
    #####:   11:        return NULL;
        -:   12:    }
        -:   13:
        6:   14:    matrix_t *r = create_matrix(m->width, height);
        -:   15:
        6:   16:    if (r == NULL)
        -:   17:    {
        -:   18:        LOG_ERROR("cant create result matrix%s", "");
    #####:   19:        return NULL;
        -:   20:    }
        -:   21:
        -:   22:    LOG_DEBUG("copy data to result matrix%s", "");
        6:   23:    memcpy(r->data, m->data, m->height * m->width * sizeof(int));
        -:   24:
        -:   25:    LOG_DEBUG("fill new rows%s", "");
        -:   26:
        -:   27:    LOG_DEBUG("x\tmean%s", "");
        -:   28:
       17:   29:    for (size_t x = 0; x < m->width; x++)
        -:   30:    {
       11:   31:        int sum = 0;
        -:   32:
       32:   33:        for (size_t y = 0; y < m->height; y++)
       21:   34:            sum += m->data[x + y * m->width];
        -:   35:
       11:   36:        int mean = sum / m->height;
        -:   37:
        -:   38:        LOG_DEBUG("%lu\t%d", x, mean);
        -:   39:
       23:   40:        for (size_t y = m->height; y < height; y++)
       12:   41:            r->data[x + y * r->width] = mean;
        -:   42:    }
        -:   43:
        -:   44:    LOG_DEBUG("result:%s", "");
        -:   45:    LOG_DEBUG_MATRIX(r);
        -:   46:
        -:   47:    LOG_DEBUG("return %p", (void *) r);
        -:   48:
        6:   49:    return r;
        -:   50:}
        -:   51:
        6:   52:matrix_t *grow_matrix_columns(const matrix_t *m, size_t width)
        -:   53:{
        -:   54:    LOG_DEBUG("m = %p, width = %lu", (void *) m, width);
        -:   55:    LOG_DEBUG("m->width = %lu", m->width);
        -:   56:
        6:   57:    if (m->width >= width)
        -:   58:    {
        -:   59:        LOG_ERROR("matrix width is not less than target width%s", "");
    #####:   60:        return NULL;
        -:   61:    }
        -:   62:
        6:   63:    matrix_t *r = create_matrix(width, m->height);
        -:   64:
        6:   65:    if (r == NULL)
        -:   66:    {
        -:   67:        LOG_ERROR("cant create result matrix%s", "");
    #####:   68:        return NULL;
        -:   69:    }
        -:   70:
        -:   71:    LOG_DEBUG("copy data to result matrix%s", "");
       24:   72:    for (size_t y = 0; y < m->height; y++)
       18:   73:        memcpy(r->data + y * r->width, m->data + y * m->width, m->width * sizeof(int));
        -:   74:
        -:   75:    LOG_DEBUG("fill new columns%s", "");
        -:   76:    LOG_DEBUG("y\tmin%s", "");
        -:   77:
       24:   78:    for (size_t y = 0; y < m->height; y++)
        -:   79:    {
       18:   80:        int *m_row = m->data + y * m->width;
       18:   81:        int min_el = *m_row;
        -:   82:
       33:   83:        for (size_t x = 1; x < m->width; x++)
       15:   84:            if (min_el > *(x + m_row))
        6:   85:                min_el = *(x + m_row);
        -:   86:
        -:   87:        LOG_DEBUG("%lu\t%d", y, min_el);
        -:   88:
       18:   89:        int *r_row = r->data + y * r->width;
        -:   90:
       39:   91:        for (size_t x = m->width; x < r->width; x++)
       21:   92:            *(r_row + x) = min_el;
        -:   93:    }
        -:   94:
        -:   95:    LOG_DEBUG("result:%s", "");
        -:   96:    LOG_DEBUG_MATRIX(r);
        -:   97:
        -:   98:    LOG_DEBUG("return %p", (void *) r);
        -:   99:
        6:  100:    return r;
        -:  101:}
        -:  102:
        6:  103:matrix_t *grow_matrix(const matrix_t *m, size_t size)
        -:  104:{
        -:  105:    LOG_DEBUG("m = %p, size = %lu", (void *) m, size);
        -:  106:
        -:  107:    LOG_DEBUG("grow rows%s", "");
        6:  108:    matrix_t *r_rows = grow_matrix_rows(m, size);
        -:  109:
        6:  110:    if (r_rows == NULL)
        -:  111:    {
        -:  112:        LOG_ERROR("matrix rows growing is broken%s", "");
    #####:  113:        return NULL;
        -:  114:    }
        -:  115:
        -:  116:    LOG_DEBUG("grow columns%s", "");
        6:  117:    matrix_t *r = grow_matrix_columns(r_rows, size);
        -:  118:
        6:  119:    if (r == NULL)
        -:  120:    {
        -:  121:        LOG_ERROR("matrix columns growing is broken%s", "");
    #####:  122:        free_matrix(r_rows);
    #####:  123:        return NULL;
        -:  124:    }
        -:  125:
        6:  126:    free_matrix(r_rows);
        -:  127:
        -:  128:    LOG_DEBUG("return %p", (void *) r);
        -:  129:
        6:  130:    return r;
        -:  131:}
