        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:
        -:    3:#define MAX_ARRAY_SIZE 10
        -:    4:#define OK 0
        -:    5:#define INPUT_LEN_ERR 1
        -:    6:#define INPUT_ELEMENTS_ERR 2
        -:    7:#define PROCESS_ERR 3
        -:    8:
        5:    9:int scanf_array(int *a, int *const len)
        -:   10:{
        5:   11:    printf("Enter array length:\n");
        5:   12:    int rc = scanf("%d", len);
        -:   13:
        5:   14:    if (rc != 1 || *len <= 0 || *len > MAX_ARRAY_SIZE)
        -:   15:    {
        1:   16:        return INPUT_LEN_ERR;
        -:   17:    }
        -:   18:
        4:   19:    printf("Enter array elements:\n");
        -:   20:
       11:   21:    for (int i = 0; i < *len; i++)
        -:   22:    {
        8:   23:        rc = scanf("%d", a + i);
        -:   24:
        8:   25:        if (rc != 1 || rc == EOF)
        -:   26:        {
        1:   27:            return INPUT_ELEMENTS_ERR;
        -:   28:        }
        -:   29:    }
        3:   30:    return OK;
        -:   31:}
        -:   32:
        2:   33:void print_array(const int *a, const int n)
        -:   34:{
        4:   35:    for (int i = 0; i < n; i++)
        -:   36:    {
        2:   37:        printf("%d ", a[i]);
        -:   38:    }
        2:   39:    printf("\n");
        2:   40:}
        -:   41:
        7:   42:int is_palindrome(int x)
        -:   43:{
        7:   44:    if (x < 0)
        2:   45:        x = -x;
        -:   46:
        7:   47:    int initial = x, reversed = 0;
        -:   48:
       27:   49:    while (x > 0)
        -:   50:    {
       13:   51:        reversed = reversed * 10 + x % 10;
       13:   52:        x /= 10;
        -:   53:    }
        -:   54:
        7:   55:    return reversed == initial;
        -:   56:}
        -:   57:
        3:   58:void filter_palindromes(const int a[], const int n, int out_a[], int *const out_n)
        -:   59:{
        3:   60:    int j = 0;
       10:   61:    for (int i = 0; i < n; i++)
        -:   62:    {
        7:   63:        if (!is_palindrome(a[i]))
        -:   64:        {
        2:   65:            out_a[j++] = a[i];
        -:   66:        }
        -:   67:    }
        3:   68:    *out_n = j;
        3:   69:}
        -:   70:
        5:   71:int main(void)
        -:   72:{
        -:   73:    int a[MAX_ARRAY_SIZE], b[MAX_ARRAY_SIZE];
        -:   74:    int n_a, n_b, rc;
        -:   75:
        5:   76:    rc = scanf_array(a, &n_a);
        -:   77:
        5:   78:    if (rc == INPUT_LEN_ERR)
        -:   79:    {
        1:   80:        printf("Array size is invalid.\n");
        1:   81:        return rc;
        -:   82:    }
        4:   83:    else if (rc == INPUT_ELEMENTS_ERR)
        -:   84:    {
        1:   85:        printf("Oops! It was a bad element.\n");
        1:   86:        return rc;
        -:   87:    }
        3:   88:    else if (rc != OK)
        -:   89:    {
    #####:   90:        printf("Unknown code error %d.\n", rc);
    #####:   91:        return rc;
        -:   92:    }
        -:   93:
        3:   94:    filter_palindromes(a, n_a, b, &n_b);
        -:   95:
        3:   96:    if (n_b == 0)
        -:   97:    {
        1:   98:        printf("All elements are palindromes.\n");
        1:   99:        return PROCESS_ERR;
        -:  100:    }
        -:  101:
        2:  102:    print_array(b, n_b);
        -:  103:
        2:  104:    return OK;
        -:  105:}
