        -:    0:Source:main.c
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include <string.h>
        -:    4:#include <stdbool.h>
        -:    5:#include "sizes.h"
        -:    6:#include "input.h"
        -:    7:
        8:    8:void magic_process_word(char *word)
        -:    9:{
        8:   10:    char letter = *(word++);
        8:   11:    char *dest = word;
       25:   12:    while (*word != '\0')
        -:   13:    {
       17:   14:        if (*word == letter)
        -:   15:        {
        7:   16:            word++;
        -:   17:        }
        -:   18:        else
        -:   19:        {
       10:   20:            *(dest++) = *(word++);
        -:   21:        }
        -:   22:    }
        8:   23:    *dest = '\0';
        8:   24:}
        -:   25:
       12:   26:char* strcat_reverse(char *dest, char *what)
        -:   27:{
       12:   28:    int word_len = strlen(what);
       12:   29:    char *p = strrchr(dest, '\0');
       12:   30:    char *p_new = p + word_len;
        -:   31:
       48:   32:    while (p >= dest)
        -:   33:    {
       36:   34:        *(p_new--) = *(p--);
        -:   35:    }
        -:   36:
       12:   37:    memcpy(dest, what, word_len);
       12:   38:    return dest;
        -:   39:}
        -:   40:
        5:   41:void magic_process(char *dest, char words[][WORD_STR_MAX_SIZE + 1], int n_words)
        -:   42:{
        5:   43:    *dest = '\0';
        5:   44:    char (*last_word)[WORD_STR_MAX_SIZE + 1] = words + n_words - 1;
        5:   45:    bool first = true;
        -:   46:
       27:   47:    for(char (*word)[WORD_STR_MAX_SIZE + 1] = words; word < last_word; word++)
        -:   48:    {
       22:   49:        if (strcmp(*last_word, *word) == 0)
        -:   50:        {
       14:   51:            continue;
        -:   52:        }
        -:   53:
        8:   54:        magic_process_word(*word);
        -:   55:
        8:   56:        if (!first)
        -:   57:        {
        4:   58:            strcat_reverse(dest, " ");
        -:   59:        }
        8:   60:        first = false;
        -:   61:
        8:   62:        strcat_reverse(dest, *word);
        -:   63:    }
        5:   64:}
        -:   65:
        6:   66:int main(void)
        -:   67:{
        -:   68:    char s[STR_MAX_SIZE];
        -:   69:    char words[MAX_WORDS][WORD_STR_MAX_SIZE + 1];
        -:   70:    int words_n;
        -:   71:
        6:   72:    printf("Enter a string:\n");
        6:   73:    words_n = scan_words(words);
        -:   74:
        6:   75:    if (words_n == INPUT_ERR)
        -:   76:    {
        1:   77:        fprintf(stderr, "Invalid input\n");
        1:   78:        return EXIT_FAILURE;
        -:   79:    }
        -:   80:
        5:   81:    magic_process(s, words, words_n);
        -:   82:
        5:   83:    if (strlen(s) == 0)
        -:   84:    {
        1:   85:        fprintf(stderr, "Output string is empty\n");
        1:   86:        return EXIT_FAILURE;
        -:   87:    }
        -:   88:
        4:   89:    printf("Result: %s\n", s);
        -:   90:
        4:   91:    return EXIT_SUCCESS;
        -:   92:}
