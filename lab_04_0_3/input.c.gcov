        -:    0:Source:input.c
        -:    1:#include <stdio.h>
        -:    2:#include "input.h"
        -:    3:
       99:    4:int is_word_delimiter(char c)
        -:    5:{
        -:    6:    return (c == ' '
       71:    7:        || c == ','
       71:    8:        || c == ';'
       71:    9:        || c == ':'
       71:   10:        || c == '-'
       70:   11:        || c == '.'
       70:   12:        || c == '!'
      170:   13:        || c == '?');
        -:   14:}
        -:   15:
        6:   16:int scan_words(char words[][WORD_STR_MAX_SIZE + 1])
        -:   17:{
        -:   18:    char c;
        6:   19:    char *word = words[0];
        6:   20:    int word_len = 0;
        6:   21:    int n = 0;
        -:   22:
      105:   23:    for (int i = 0; i <= STR_MAX_SIZE && word_len <= WORD_STR_MAX_SIZE; i++)
        -:   24:    {
      104:   25:        c = getchar();
        -:   26:
      104:   27:        if (c == '\n' || c == EOF)
        -:   28:        {
        5:   29:            if (word_len == 0)
        -:   30:            {
        1:   31:                break;
        -:   32:            }
        4:   33:            n++;
        4:   34:            *word = '\0';
        4:   35:            break;
        -:   36:        }
        -:   37:
       99:   38:        if (!is_word_delimiter(c))
        -:   39:        {
       68:   40:            word_len++;
       68:   41:            *(word++) = c;
        -:   42:        }
       31:   43:        else if (word_len > 0)
        -:   44:        {
       23:   45:            word_len = 0;
       23:   46:            *word = '\0';
       23:   47:            word = words[++n];
        -:   48:        }
        -:   49:    }
        -:   50:
        6:   51:    if ((c == '\n' || c == EOF) && n > 0)
        -:   52:    {
        5:   53:        return n;
        -:   54:    }
        -:   55:
        1:   56:    return INPUT_ERR;
        -:   57:}
