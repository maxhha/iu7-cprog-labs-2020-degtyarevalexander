        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:10
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <stdbool.h>
        -:    3:
        -:    4:#define OK 0
        -:    5:#define INPUT_ERR 1
        -:    6:
        -:    7:#define MAX_ROWS 10
        -:    8:#define MAX_COLUMNS 10
        -:    9:
        9:   10:bool is_valid_size(int rows, int columns)
        -:   11:{
        -:   12:    return (
        -:   13:        rows > 0
        9:   14:        && rows <= MAX_ROWS
        8:   15:        && columns > 0
       16:   16:        && columns <= MAX_COLUMNS
        -:   17:        );
        -:   18:}
        -:   19:
       10:   20:int scanf_matrix(int a[][MAX_COLUMNS], int *rows, int *columns)
        -:   21:{
       10:   22:    printf("Enter matrix size:\n");
       10:   23:    int rc = scanf("%d %d", rows, columns);
        -:   24:
       10:   25:    if (rc != 2 || rc == EOF || !is_valid_size(*rows, *columns))
        -:   26:    {
        3:   27:        return INPUT_ERR;
        -:   28:    }
        -:   29:
        7:   30:    printf("Enter elements:\n");
        -:   31:
       20:   32:    for (int i = 0; i < *rows; i++)
        -:   33:    {
       41:   34:        for (int j = 0; j < *columns; j++)
        -:   35:        {
       28:   36:            rc = scanf("%d", *(a + i) + j);
        -:   37:
       28:   38:            if (rc != 1 || rc == EOF)
        -:   39:            {
        1:   40:                return INPUT_ERR;
        -:   41:            }
        -:   42:        }
        -:   43:    }
        6:   44:    return OK;
        -:   45:}
        -:   46:
        6:   47:void print_array(bool *a, int len)
        -:   48:{
       16:   49:    for (int i = 0; i < len; i++)
        -:   50:    {
       10:   51:        printf("%d ", a[i]);
        -:   52:    }
        6:   53:    printf("\n");
        6:   54:}
        -:   55:
        6:   56:void magic_reduce(int a[][MAX_COLUMNS], int rows, int columns, bool *result)
        -:   57:{
       16:   58:    for (int col = 0; col < columns; col++)
        -:   59:    {
       10:   60:        int prev = a[0][col];
       10:   61:        result[col] = rows > 1;
        -:   62:
       14:   63:        for (int row = 1; row < rows; row++)
        -:   64:        {
        8:   65:            if (prev <= a[row][col])
        -:   66:            {
        4:   67:                result[col] = false;
        4:   68:                break;
        -:   69:            }
        4:   70:            prev = a[row][col];
        -:   71:        }
        -:   72:    }
        6:   73:}
        -:   74:
       10:   75:int main(void)
        -:   76:{
        -:   77:    int a[MAX_ROWS][MAX_COLUMNS];
        -:   78:    int a_rows, a_columns;
        -:   79:    bool b[MAX_COLUMNS];
        -:   80:    int rc;
        -:   81:
       10:   82:    rc = scanf_matrix(a, &a_rows, &a_columns);
        -:   83:
       10:   84:    if (rc != OK)
        -:   85:    {
        4:   86:        fprintf(stderr, "Invalid input\n");
        -:   87:
        4:   88:        return INPUT_ERR;
        -:   89:    }
        -:   90:
        6:   91:    magic_reduce(a, a_rows, a_columns, b);
        -:   92:
        6:   93:    print_array(b, a_columns);
        -:   94:
        6:   95:    return OK;
        -:   96:}
