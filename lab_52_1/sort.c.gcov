        -:    0:Source:sort.c
        -:    1:#include <stdio.h>
        -:    2:#include <stdlib.h>
        -:    3:#include "common.h"
        -:    4:
        -:    5:#define TYPE array
        -:    6:#define IN_TYPE struct Student *
        -:    7:#include "sort_template.c"
        -:    8:#undef TYPE
        -:    9:#undef IN_TYPE
        -:   10:
        8:   11:int main_sort_text(int argc, char **argv)
        -:   12:{
        8:   13:    if (argc < 2)
        -:   14:    {
        1:   15:        fprintf(stderr, "No input filename\n");
        1:   16:        return EXIT_FAILURE;
        -:   17:    }
        -:   18:
        7:   19:    FILE *f = fopen(argv[1], "r");
        -:   20:
        7:   21:    if (f == NULL)
        -:   22:    {
        1:   23:        fprintf(stderr, "File open error\n");
        1:   24:        return EXIT_FAILURE;
        -:   25:    }
        -:   26:
        -:   27:    struct Student students[MAX_STUDENTS];
        -:   28:    int students_n;
        -:   29:
        6:   30:    if (parse_file(f, MAX_STUDENTS, students, &students_n) != OK)
        -:   31:    {
        1:   32:        fclose(f);
        1:   33:        fprintf(stderr, "Parse error on %d\n", students_n + 1);
        1:   34:        return EXIT_FAILURE;
        -:   35:    }
        5:   36:    fclose(f);
        -:   37:
        5:   38:    if (students_n == 0)
        -:   39:    {
        1:   40:        fprintf(stderr, "No students\n");
        1:   41:        return EXIT_FAILURE;
        -:   42:    }
        -:   43:
        4:   44:    sort_array(students, students_n);
        -:   45:
       13:   46:    for (int i = 0; i < students_n; i++)
        -:   47:    {
        9:   48:        printf_student(stdout, students[i]);
        -:   49:    }
        -:   50:
        4:   51:    return EXIT_SUCCESS;
        -:   52:}
        -:   53:
        -:   54:#define TYPE file
        -:   55:#define IN_TYPE FILE *
        -:   56:#include "sort_template.c"
        -:   57:#undef TYPE
        -:   58:#undef IN_TYPE
        -:   59:
        8:   60:int main_sort_bin(int argc, char **argv)
        -:   61:{
        8:   62:    if (argc < 2)
        -:   63:    {
        1:   64:        fprintf(stderr, "No input filename\n");
        1:   65:        return EXIT_FAILURE;
        -:   66:    }
        -:   67:
        7:   68:    FILE *f = fopen(argv[1], "rb+a");
        -:   69:
        7:   70:    if (f == NULL)
        -:   71:    {
        1:   72:        fprintf(stderr, "File open error\n");
        1:   73:        return EXIT_FAILURE;
        -:   74:    }
        -:   75:
        6:   76:    fseek(f, 0, SEEK_END);
        6:   77:    int size = ftell(f);
        -:   78:
        6:   79:    if (size % sizeof(struct Student) != 0 || size <= 0)
        -:   80:    {
        2:   81:        fclose(f);
        2:   82:        fprintf(stderr, "File size is incorrect\n");
        2:   83:        return EXIT_FAILURE;
        -:   84:    }
        4:   85:    fseek(f, 0, SEEK_SET);
        4:   86:    int students_n = size / sizeof(struct Student);
        -:   87:
        4:   88:    sort_file(f, students_n);
        -:   89:
        4:   90:    fseek(f, 0, SEEK_SET);
        -:   91:    struct Student student;
        -:   92:
       13:   93:    for (int i = 0; i < students_n; i++)
        -:   94:    {
        9:   95:        fread(&student, sizeof(struct Student), 1, f);
        9:   96:        printf_student(stdout, student);
        -:   97:    }
        -:   98:
        4:   99:    fclose(f);
        -:  100:
        4:  101:    return EXIT_SUCCESS;
        -:  102:}
