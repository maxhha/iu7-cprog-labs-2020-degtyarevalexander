        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:
        -:    3:#define MAX_ARRAY_SIZE 10
        -:    4:#define OK 0
        -:    5:#define INPUT_LEN_ERR 1
        -:    6:#define INPUT_ELEMENTS_ERR 2
        -:    7:
        5:    8:int scanf_array(int *a, int *len)
        -:    9:{
        5:   10:    printf("Enter array length:\n");
        5:   11:    int rc = scanf("%d", len);
        -:   12:
        5:   13:    if (rc != 1 || *len <= 0 || *len > MAX_ARRAY_SIZE)
        -:   14:    {
        1:   15:        return INPUT_LEN_ERR;
        -:   16:    }
        -:   17:
        4:   18:    printf("Enter array elements:\n");
        -:   19:
       11:   20:    for (int i = 0; i < *len; i++)
        -:   21:    {
        8:   22:        rc = scanf("%d", a + i);
        -:   23:
        8:   24:        if (rc != 1 || rc == EOF)
        -:   25:        {
        1:   26:            return INPUT_ELEMENTS_ERR;
        -:   27:        }
        -:   28:    }
        3:   29:    return OK;
        -:   30:}
        -:   31:
        3:   32:void print_array(int *a, int n)
        -:   33:{
       10:   34:    for (int i = 0; i < n; i++)
        -:   35:    {
        7:   36:        printf("%d ", a[i]);
        -:   37:    }
        3:   38:    printf("\n");
        3:   39:}
        -:   40:
        3:   41:void sort_array(int *a, int n)
        -:   42:{
        7:   43:    for (int i = 1; i < n; i++)
        -:   44:    {
        4:   45:        int x = a[i];
        4:   46:        int j = i;
       12:   47:        while (j > 0 && a[j - 1] > x)
        -:   48:        {
        4:   49:            a[j] = a[j - 1];
        4:   50:            j--;
        -:   51:        }
        4:   52:        a[j] = x;
        -:   53:    }
        3:   54:}
        -:   55:
        5:   56:int main(void)
        -:   57:{
        -:   58:    int a[MAX_ARRAY_SIZE];
        -:   59:    int n_a, rc;
        -:   60:
        5:   61:    rc = scanf_array(a, &n_a);
        -:   62:
        5:   63:    if (rc == INPUT_LEN_ERR)
        -:   64:    {
        1:   65:        printf("Array size is invalid.\n");
        1:   66:        return rc;
        -:   67:    }
        4:   68:    else if (rc == INPUT_ELEMENTS_ERR)
        -:   69:    {
        1:   70:        printf("Oops! It was a bad element.\n");
        1:   71:        return rc;
        -:   72:    }
        3:   73:    else if (rc != OK)
        -:   74:    {
    #####:   75:        printf("Unknown code error %d.\n", rc);
    #####:   76:        return rc;
        -:   77:    }
        -:   78:
        3:   79:    sort_array(a, n_a);
        -:   80:
        3:   81:    print_array(a, n_a);
        -:   82:
        3:   83:    return OK;
        -:   84:}
