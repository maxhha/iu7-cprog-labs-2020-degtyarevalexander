        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    0:Source is newer than graph
        -:    1:#include <stdio.h>
        -:    2:#include <stdbool.h>
        -:    3:
        -:    4:#define OK 0
        -:    5:#define INPUT_ERR 1
        -:    6:#define NOT_FOUND_ERR 2
        -:    7:
        -:    8:#define MAX_ROWS 10
        -:    9:#define MAX_COLUMNS 10
        -:   10:
        3:   11:bool is_valid_size(int rows, int columns)
        -:   12:{
        -:   13:    return (
        -:   14:        rows > 0
        3:   15:        && rows <= MAX_ROWS
        3:   16:        && columns > 0
        3:   17:        && columns <= MAX_COLUMNS
        6:   18:        && columns == rows);
        -:   19:}
        -:   20:
        -:   21:int scanf_matrix(int a[][MAX_COLUMNS], int *rows, int *columns)
        4:   22:{
        -:   23:    printf("Enter matrix size:\n");
        4:   24:    int rc = scanf("%d %d", rows, columns);
        4:   25:
        -:   26:    if (rc != 2 || rc == EOF || !is_valid_size(*rows, *columns))
        4:   27:    {
        -:   28:        return INPUT_ERR;
        1:   29:    }
        -:   30:
        -:   31:    printf("Enter elements:\n");
        3:   32:
        -:   33:    for (int i = 0; i < *rows; i++)
        9:   34:    {
        -:   35:        for (int j = 0; j < *columns; j++)
       25:   36:        {
        -:   37:            rc = scanf("%d", *(a + i) + j);
       19:   38:
        -:   39:            if (rc != 1 || rc == EOF)
       19:   40:            {
        -:   41:                return INPUT_ERR;
        1:   42:            }
        -:   43:        }
        -:   44:    }
        -:   45:    return OK;
        2:   46:}
        -:   47:
        -:   48:int find_min(int a[][MAX_ROWS], int rows, int columns, bool (*predicat)(int, int, int), int *result)
        2:   49:{
        -:   50:    int min;
        -:   51:    bool first = true;
        -:   52:
        -:   53:    for (int r = 0; r < rows; r++)
        -:   54:        for (int c = 0; c < columns; c++)
        -:   55:            if (predicat(a[r][c], c, r) && (first || min > a[r][c]))
        -:   56:            {
        -:   57:                min = a[r][c];
        2:   58:                first = false;
        -:   59:            }
        8:   60:
       24:   61:    if (first)
       18:   62:    {
        -:   63:        return NOT_FOUND_ERR;
        1:   64:    }
        1:   65:
        -:   66:    *result = min;
        -:   67:    return OK;
        2:   68:}
        -:   69:
        1:   70:bool is_valid(int val, int x, int y)
        -:   71:{
        -:   72:    return (val & 1) && (y > x);
        1:   73:}
        1:   74:
        -:   75:int main(void)
        -:   76:{
       18:   77:    int a[MAX_ROWS][MAX_COLUMNS];
        -:   78:    int a_rows, a_columns;
       18:   79:    int min_value;
        -:   80:    int rc;
        -:   81:
        4:   82:    rc = scanf_matrix(a, &a_rows, &a_columns);
        -:   83:
        -:   84:    if (rc != OK)
        -:   85:    {
        -:   86:        fprintf(stderr, "Invalid input\n");
        -:   87:
        -:   88:        return INPUT_ERR;
        4:   89:    }
        -:   90:
        4:   91:    rc = find_min(a, a_rows, a_columns, is_valid, &min_value);
        -:   92:
        2:   93:    if (rc != OK)
        -:   94:    {
        2:   95:        fprintf(stderr, "Minimum wasn`t found\n");
        -:   96:
        -:   97:        return NOT_FOUND_ERR;
        2:   98:    }
        -:   99:
        2:  100:    printf("%d\n", min_value);
        -:  101:
        1:  102:    return OK;
        -:  103:}
        1:  104:/*EOF*/
        -:  105:/*EOF*/
        -:  106:/*EOF*/
        1:  107:/*EOF*/
        -:  108:/*EOF*/
        1:  109:/*EOF*/
